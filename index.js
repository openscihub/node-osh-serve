var express = require('express');
var Dynapack = require('dynapack');
var fs = require('fs');
var temp = require('temp').track();
var serveStatic = require('serve-static');
var path = require('path');
var extend = require('xtend');


/**
 *
 *  This function is async b/c we have to bundle javascript.  It returns an
 *  Express instance (which is an EventEmitter) that emits the 'serving' event
 *  when all javascript has been bundled and all middleware has been attached.
 *  If an error occurs, the 'error' event will emit.
 *
 *  @param {Object} opts
 *    @property {Express} app (optional) Use a pre-existing express instance.
 *      Otherwise, create one.
 *    @property {String} dir The base directory for all pages and paths. Defaults
 *      to current working directory.
 *    @property {Array<String>} pages Each array element is a string pointing
 *      to a module that exports a Page instance.  The string can be relative
 *      to the 'dir' setting.
 *    @property {Array<Path|String>} paths Serve these Paths. An array element
 *      can be a Path instance or a string pointing to a module that exports
 *      a Path instance. The string can be relative to the 'dir' setting.
 *    @property {Object} scripts Options for module bundling; most of the
 *      properties on this object are passed directly to Dynapack.
 *      @property {Boolean} serve If true, javascript bundles are served via
 *        this Express app under 'prefix' using the serve-static package.
 *        Default: true.
 *      @property {String} prefix (Dynapack) This is prepended to each script
 *        name generated by Dynapack. If 'serve' is true, this prefix is also
 *        used to serve generated javascript bundles. If you send your bundles
 *        to a CDN, then the prefix should include the protocol, hostname, etc.
 *        Default: '/'
 *      @property {String} output (Dynapack)
 *        Where to save the generated bundles. If left unspecified, and 'serve'
 *        is true, we save them in a temporary directory. If unspecified and 'serve'
 *        is false, no bundles are created and your app will serve static pages.
 */

function serve(opts) {
  var app = opts.app || express();
  opts.dir = opts.dir || process.cwd();

  // Serving __paths is easy-peasy.

  (opts.paths || []).forEach(function(__path) {
    (
      'string' == typeof __path ?
      require(
        path.resolve(opts.dir, __path)
      ) : 
      __path
    )
    .serve(app);
  });

  // Prepare pages.

  var __pages = (opts.pages || []).map(function(__page) {
    return path.resolve(opts.dir, __page);
  });

  var packOpts = extend(
    {
      pages: __pages,
      app: app,
      serve: true
    },
    opts.scripts || {}
  );

  pack(packOpts, function(err, entryInfo) {
    if (err) app.emit('error', err);
    else {
      __pages.forEach(function(__page) {
        require(__page).serve({
          app: app,
          scripts: entryInfo ? entryInfo[__page] : [],
        });
      });
      app.emit('serving');
    }
  });

  return app;
}


/**
 *  Pack up javascript bundles and serve them if dev so requests.
 *
 *  Options
 *    @property {Express} app
 *    @property {Array<String>} pages Each array element is a string pointing
 *      to a module that exports a Page instance.  The string can be relative
 *      to the 'dir' setting.
 *    @property {Array<Path|String>} paths Serve these Paths. An array element
 *      can be a Path instance or a string pointing to a module that exports
 *      a Path instance. The string can be relative to the 'dir' setting.
 *    @property {Boolean} serve If true, javascript bundles are served via
 *      this Express app under 'prefix'. Default: true.
 *    @property {String} prefix (Dynapack) This is prepended to each script
 *      name generated by Dynapack. If 'serve' is true, this prefix is also
 *      used to serve generated javascript bundles. If you send your bundles
 *      to a CDN, then the prefix should include the protocol, hostname, etc.
 *      Default: '/'
 *    @property {String} output (Dynapack)
 *      Where to save the generated bundles. If left unspecified, and 'serve'
 *      is true, we save them in a temporary directory. If unspecified and 'serve'
 *      is false, no bundles are created and your app will serve static pages.
 */

function pack(opts, callback) {
  if (opts.output || opts.serve) {

    var prefix;
    if (prefix = opts.prefix) {
      prefix += /\/$/.test(prefix) ? '' : '/';
    }
    else prefix = '/';

    var output = opts.output || temp.mkdirSync('__bundles');

    var packer = Dynapack(
      opts.pages || [],
      {
        prefix: prefix,
        output: output
      }
    );

    packer.run(function() {
      packer.write(callback);
    });

    if (opts.serve && prefix[0] === '/') {
      opts.app.use(
        prefix,
        serveStatic(output)
      );
    }
  }
  else {
    process.nextTick(callback);
  }
}


module.exports = serve;
